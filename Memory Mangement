1. BEST FIT

#include <stdio.h>
#define MAX_MEMORY_BLOCKS 100
#define MAX_PROCESS 100

int main() {
    int memory_blocks[MAX_MEMORY_BLOCKS];
    int processes[MAX_PROCESS];
    int m, n;

    printf("Enter the number of memory blocks: ");
    scanf("%d", &m);

    printf("Enter the sizes of memory blocks:\n");
    for (int i = 0; i < m; i++) {
        scanf("%d", &memory_blocks[i]);
    }

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter the sizes of processes:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &processes[i]);
    }

    printf("Best Fit Memory Allocation:\n");

    for (int i = 0; i < n; i++) {
        int best_fit = -1;
        for (int j = 0; j < m; j++) {
            if (memory_blocks[j] >= processes[i]) {
                if (best_fit == -1 || memory_blocks[j] < memory_blocks[best_fit]) {
                    best_fit = j;
                }
            }
        }
        if (best_fit == -1)
            printf("Process %d cannot be allocated to any memory block\n", i + 1);
        else {
            memory_blocks[best_fit] -= processes[i];
            printf("Process %d allocated to memory block %d\n", i + 1, best_fit + 1);
        }
    }

    return 0;
}

2. FIRST FIT
#include <stdio.h>
#define MAX_MEMORY_BLOCKS 100
#define MAX_PROCESS 100

int main() {
    int memory_blocks[MAX_MEMORY_BLOCKS];
    int processes[MAX_PROCESS];
    int m, n;

    printf("Enter the number of memory blocks: ");
    scanf("%d", &m);

    printf("Enter the sizes of memory blocks:\n");
    for (int i = 0; i < m; i++) {
        scanf("%d", &memory_blocks[i]);
    }

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter the sizes of processes:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &processes[i]);
    }

    printf("First Fit Memory Allocation:\n");

    for (int i = 0; i < n; i++) {
        int j;
        for (j = 0; j < m; j++) {
            if (memory_blocks[j] >= processes[i]) {
                memory_blocks[j] -= processes[i];
                printf("Process %d allocated to memory block %d\n", i + 1, j + 1);
                break;
            }
        }
        if (j == m)
            printf("Process %d cannot be allocated to any memory block\n", i + 1);
    }

    return 0;
}

